Получаем доступ в Трелло по ссылке в документах в канале #qa_java_projectСоздаем тест в Трелло:

    В Трелло выбираем Сторю (US), по которой будем писать тест (колонка US to do)

    Можно выбирать любые стори и любые тесты - тесты могут повторяться

    Проверяем, что тест, который мы хотим написать, еще никто не написал до нас (колонки от TC review до Done)

    Может быть несколько одинаковых тестов, но тогда соблюдайте нумерацию

    Если такого теста еще нет - открываем карточку "TC_00.000.00 | Item > Sub item > US title" из колонки Backlog (это колонка с шаблонами карточек) и нажимаем кнопку "Create card from template" вверху
    Указываем номер и название для теста

    TC_00.000.00 - тут 00.000 меняем на такие же, как и у стори, по которой пишется тест
    последние .00 означают номер теста по порядку для этой стори - проверяем, сколько тестов по сторе уже было написано и указываем следующий номер
    Item > Sub item > US title - меняем на название вашего теста исходя из того, что планируется проверять
    Переводим карточку в статус ToDo

Работаем с карточкой теста в Трелло

    В созданной карточке теста

    Добавляем себя (свой аккаунт) в Members
    В attachments добавляем сторю (US), по которой пишется тест
    Для прилинкованной стори нажимаем Connect Cards

    (опционально, но очень желательно) Заполняем Steps и Expected Result
    (опционально) Если хотим, чтобы наш тест проревьюили - переводим карточку в колонку TC Review и кидаем ссылку на тест в канал вашей группы (или группы #qa_java_project) с просьбой проревьюить
    Карточку теста, готового к написанию кода (прошедшего через ревью или нет), переносим в колонку In Progress
    Когда код теста написан и Pull Request создан - переносим карточку теста в колонку CodeReview
    Добавляем в тест ссылку на PR на GitHub (добавляем как Attachment)
    Кидаем ссылку на тест в канал вашей группы (или группы #qa_java_project) с просьбой проревьюить PR (лучше ссылку на карточку теста, но можно и ссылку на PR)
    После того, как PR смержен - переносим карточку в колонку Done

Работаем с тестом в Intellij IDEA:

    Перед началом работы как обычно делаем pull в main и после этого создаем свою ветку

    (Опционально) Можно в названии ветки указывать ваш идентификатор (например, имя или инициалы), а дальше ID теста (например, TC_00.000.00)

    Проверяем, есть ли подходящий для нашего теста класс

    Класс должен называться исходя из той сущности, которая будет тестироваться (например, FreestyleProjectTest)
    Если подходящий класс уже есть - добавляем код для нашего теста в существующий класс
    Если класса нет - создаем его и уже в него добавляем код
    (Допускается, но скорее всего нежелательно) Можно создать свой класс даже если уже есть аналогичный
    Не забываем добавить "extends BaseTest" для нового класса

    Когда тест готов - создаем commit с изменениями

    В комментарий к коммиту желательно добавлять ID вашего теста (например, TC_00.000.00)

    Делаем Push

Пишем код теста в Intellij IDEA:

    Аннотация @Test
    Название метода начинаем с test и дальше в названии указываем, что именно проверяем
    Если нужно использовать какую-то переменную, то можно сделать

    В начале теста добавить строку вида "final String projectName = "FreeStyleProjectName"; "

    Желательно использовать только 1 Assert в конце теста
    Если для выполнения вашего теста вам как предусловие нужно что-то создать - можно вынести это создание как отдельный метод

Работаем с тестом на GitHub:

    Создаем Pull Request
    Название PR должно быть точно таким же, как тест в Трелло (делаем копипаст)
    В описание (комментарий) к PR добавляем ссылку на карточку теста из Трелло
    Получаем 2 аппрува
    Делаем Squash and Merge
    Удаляем ветку на GitHub и локально

Q&A

    Можно ли создавать отдельный класс на конкретную сторю?

    Нет, класс создается не по сторям, а по сущности, для которой будут тесты (тесты могут быть по разным сторям)

    Старайтесь использовать 1 изменение в коде (1 коммит = 1 PR) для написания 1 теста
    Если тест упал - будет создан скриншот

    Можно посмотреть на GitHub
    В PR открываем Details для упавшего теста
    Переходим в Summary
    Внизу будет ссылка на архив screenshots-and-report
    Скачиваем - распаковываем - смотрим скрин браузера на момент падения теста

    (не актуально - см. решение в PR #995) НЕ надо писать тесты на dropdown menu, которые открываются при наведении курсора - невозможно создать локатор